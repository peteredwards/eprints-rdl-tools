use EPrints;
use strict;
use Data::Dumper;
use Sys::Hostname;
use File::Basename;
use URI::Escape;

$|++;
#my $eprints = EPrints->new;
my $repo = EPrints->new->current_repository;
exit( 0 ) unless( defined $repo );

# Get xlsfile and path parameters from URL
my $xlsfile = $repo->param( "xlsfile" );
my $xlspath = $repo->param( "xlspath" );
my $xmlfilepath = $repo->param( "xmlfilepath" );
my $passphrase = $repo->param( "oneliner" );
my $repoid = $repo->param( "repoid" );
my $history = $repo->param( "history" );
my $DEBUG = $repo->param( "debug" );
my $hbinmode = $repo->param( "hbinmode" );

# some parameters
my $VERSION = 'v1.5.1';

# NOTE: back-end file/ingest limits should always be geater than hybrid limits
# max allowed file size for ingestion
#my $max_fsize = 2 * 1024 * 1024 * 1024;
my $max_fsize = 400 * 1024; # for testing

# max allowed total ingestion size
#my $max_isize = 10 * 1024 * 1024 * 1024;
my $max_isize = 450 * 1024; # for testing

# max allowed file size for back-end ingestion
#my $max_fsize = 2 * 1024 * 1024 * 1024;
my $max_befsize = 900 * 1024; # for testing

# max allowed total back-end ingestion size
#my $max_isize = 10 * 1024 * 1024 * 1024;
my $max_beisize = 800 * 1024; # for testing

# free space always required on root file system
# this is deducted from rootfs_free and max_isize is reduced if necessary
my $rootfs_reqd = 2 * 1024 * 1024 * 1024;

####
# TO DO - check file sizes at point if ingestion?
####

# enable flags for hybrid and back-end ingestion
my $hy_enabled = 1;
my $be_enabled = 1;

my $DEBUG_LOG = 1;
my $TITLE = "RDL Data Tool - hybrid and back-end ingestion";
$TITLE .= ' (debug mode)' if $DEBUG;
my $opt_verbose = $DEBUG ? '--verbose --verbose' : '';
my $pathmsg = 'PASTE FULL PATH HERE';
my $ppmsg = 'TYPE PASSPHRASE HERE...';
my $ppans = 'g0_r3s34rch_d4t4';
my $prepath = 'N:/Academic\-Services/Library\-Services/RDL/Repository/';
my $linuxpath = '/mnt/rdl/Repository/';
my $cmd_conv = 'perl /export/home/eprints/_scripts/excel.pl -o -u 1 -t archive -p $xlslpath researchdata ';
my $cmd_ingest = '/usr/share/eprints/bin/import --force $opt_verbose $repoid eprint XMLIngest ';
my $cmd_genview = '/usr/share/eprints/bin/generate_views $opt_verbose $repoid ';
my $cmd_genabs = '/usr/share/eprints/bin/generate_abstracts $opt_verbose $repoid ';
my $cmd_psmem = 'ps -o vsz --no-headers $$';
my $cmd_rootfs = 'df -P -B 1 / | awk \'NR==2 { print $4 }\'';
my $cmd_inprep = '/usr/share/eprints/bin/inprep $repoid \'$xmlfilepath\'';
my $thread_size = '';
my $rootfs_free = '';
my $down_file = '/usr/share/eprints/cgi/no_ingest';

# define history info string
my $history_str = <<'__HISTORY_INFO__';
VERSION HISTORY
1.5.1 - ADD: link to ABE Ingest checker
1.5.0 - ADD: back-end ingestion option for large files and datasets
1.4.8 - ADD: max file size, ingestion size and root file system free space checks
1.4.7 - ADD: translation of URI escaped characters in filename references
1.4.6 - ADD: error trap to detect spaces in spreadsheet file path or file name
1.4.5 - MOD: implement review subdomain replacing roadmap2 for RDL review repo
1.4.4 - ADD: down for maintenance functionality
1.4.3 - ADD: thread ID and thread size output in debug mode
        ADD: thread size output in debug log
1.4.2 - ADD: debug flag across all ingestion stages
        ADD: verbose debug mode for second stage of ingestion
1.4.1 - ADD: back-end logging facility (to be further developed)
1.4.0 - MOD: repository configuration structure to increase repo-specific options
1.3.0 - ADD: file reference checking during first stage (XML file creation)
        ADD: detection of user errors in back-end processes stops workflow
        ADD: 'try again' link following back-end user errors
1.2.0 - FIX: parameter caching in Apache threads work-around
1.1.0 - COM: first production-ready version
1.0.0 - COM: initial development version (agile) for user testing and feedback

KEY
ADD - feature addition
FIX - error fix
MOD - modification / change
COM - comment

NOTES
Only fixes directly related to this utility are listed in this version history.
Fixes carried out on other EPrints back-end processes are not listed here.
__HISTORY_INFO__

#my $hostname = `hostname`;
# use the Sys::Hostname library (safer than shell command)
my $hostname = hostname;
$hostname =~ s/\s//; # remove white space form host name

my %host_cfg = (

	roadmap2 => {
		repo => {
			rdtest => {
				label => 'RDL review repository',
				lat_link => 'http://review.researchdata.leeds.ac.uk/cgi/latest',
				do_views => 1,
				do_abs => 0,
			},
			researchdata => {
				label => 'RDL live repository [ARE YOU SURE!!]',
				lat_link => 'http://archive.researchdata.leeds.ac.uk/cgi/latest',
				do_views => 0,
				do_abs => 0,
			}
		},
		https_link => 'https://archive.researchdata.leeds.ac.uk/cgi/datatool',
		default_repo => 'rdtest',
	},
	
	roadmap4 => {
		repo => {
			rdtest => {
				label => 'RDL dev test repository',
				lat_link => 'http://129.11.6.56/cgi/latest',
				do_views => 0,
				do_abs => 0,
			},
			researchdata => {
				label => 'RDL dev primary repository',
				lat_link => 'http://roadmap4.leeds.ac.uk/cgi/latest',
				do_views => 1,
				do_abs => 0,
			}
		},
		https_link => 'https://roadmap4.leeds.ac.uk/cgi/datatool',
		default_repo => 'researchdata',
	},
	
);

# generate a list of repos for this host, and a hash of labels for them
my @repos;
my %labels;
for ( sort keys %{$host_cfg{$hostname}{repo}} ) {
	push @repos, $_;
	$labels{$_} = ${host_cfg}{$hostname}{repo}{$_}->{label}; 
}

# Create empty document
my $page = $repo->make_doc_fragment();

# Create page title
my $t = $repo->make_element( "h1" );
$t->appendChild( $repo->make_text( $TITLE ) );
$page->appendChild( $t );

# create version string and link to history
my $v = $repo->make_element( "p" );
$v->appendChild( $repo->make_text( $VERSION . ' ' ) );
my $va = $repo->render_link( $host_cfg{$hostname}{https_link} . '?history=1' );
$va->appendChild( $repo->make_text( '[version history]' ) );
$v->appendChild( $va );
$page->appendChild( $v );

# set link to ABE Checker
my $abe = $repo->make_element( "p" );
$abe->appendChild( $repo->make_text( "[You can use the " ) );
my $abe_link = $repo->render_link( 'abecheck' );
$abe_link->appendChild( $repo->make_text( 'ABE Ingestion Checker' ) );
$abe->appendChild( $abe_link );
$abe->appendChild( $repo->make_text( " to check which items are set for Automated Back-End Ingestion]" ) );
$page->appendChild( $abe );

# get thread size
my $scmd = eval('"'."$cmd_psmem".'"') . " 2>&1";
chomp( $thread_size = `$scmd` );
$thread_size *= 1024; # output from ps is in KB

# get root fs free space
chomp( $rootfs_free = `$cmd_rootfs` );

# some sanity checks
# max file size cannot be larger than max ingestion size
$max_fsize = $max_isize if ( $max_fsize > $max_isize );
$max_befsize = $max_beisize if ( $max_befsize > $max_beisize );
# hybrid ingestion limits cannot be larger than back-end limits
$max_fsize = $max_befsize if ( $max_fsize > $max_befsize );
$max_isize = $max_beisize if ( $max_isize > $max_beisize );

# amend max_fsize if necessary depending on how much available root fs space
my $rootfs_avail = $rootfs_free - $rootfs_reqd;
$rootfs_avail = 0 if $rootfs_avail < 0;
$max_fsize = $rootfs_avail if ( $rootfs_avail < $max_fsize );

########
# TO DO
# user (non-debug) display of max fsize/isize for hybrid/back-end?
# also user (non-debug) display if hybrid/back-end is not enabled?
########
if ( $DEBUG ) {
	my $dp = $repo->make_element( "p" );
	my $pre = $repo->make_element( "pre" );
	my $opstr = "DEBUG INFO\n";
	$opstr .= "Thread ID: $$ - Thread size: " . hr_bytes( $thread_size, 1 ) . "\n";
	$opstr .= "Root file system free space: " . hr_bytes( $rootfs_free, 1 ) . "\n";
	$opstr .= "Root file system reserved space: " . hr_bytes( $rootfs_reqd, 1 ) . "\n";
	$opstr .= "Hybrid ingestion status: " . ( ( $hy_enabled ) ? "enabled" : "disabled" ) . "\n";
	$opstr .= "Max hybrid file/ingest size: " . hr_bytes( $max_fsize, 1 )
		. " / " . hr_bytes( $max_isize, 1 ) . "\n";
	$opstr .= "Back-end ingestion status: " . ( ( $be_enabled ) ? "enabled" : "disabled" ) . "\n";
	$opstr .= "Max back-end file/ingest size: " . hr_bytes( $max_befsize, 1 )
		. " / " . hr_bytes( $max_beisize, 1 ) . "\n";
	$pre->appendChild( $repo->make_text( $opstr ) );
	$dp->appendChild( $pre );
	$page->appendChild( $dp );
}
#$page->appendChild( $v );


# log the instance
print STDERR "Datatool: [ $$ ] " . localtime . "  TS: " . hr_bytes( $thread_size, 1 ) . "  RFSF: " . hr_bytes( $rootfs_free, 1 ) . "  IP: " . $repo->{request}->connection->remote_ip . "\n" if $DEBUG_LOG || $DEBUG;
print STDERR "Datatool: Debug initiated\n" if $DEBUG;
show_error($repo, $page, 'Sorry, this facility is currently disabled for maintenance purposes. Please try again later. For further details please contact the system administrator.') if -f $down_file;
show_error($repo, $page, 'Sorry, neither hybrid nor back-end ingestion are enabled at the moment. Please try again later. For further details please contact the system administrator.') if ( ( ! $be_enabled ) && ( ! $hy_enabled ) );
show_error($repo, $page, 'Sorry but this facility is not configured to run on this host') if ! exists $host_cfg{$hostname};
show_error($repo, $page, 'Sorry but I can only work on a secure connection - try ', $host_cfg{$hostname}{https_link}) if(!$ENV{'HTTPS'});
show_error($repo, $page, 'Default repository is not defined for this host') if ! exists $host_cfg{$hostname}{default_repo};
show_error($repo, $page, 'Default repository as defined has no configuration settings') if ! exists $host_cfg{$hostname}{repo}{$host_cfg{$hostname}{default_repo}};

# Show version history
if ( defined $history ) {
	# Create history info
	my $h = $repo->make_element( "pre", style => 'white-space: pre-wrap; overflow: auto;' );
	$h->appendChild( $repo->make_text( $history_str ) );
	$page->appendChild( $h );
	
	# create link to ingestion workflow
	my $hp = $repo->make_element( "p" );
	my $ha = $repo->render_link( $host_cfg{$hostname}{https_link} );
	$ha->appendChild( $repo->make_text( 'Hybrid ingestion home page' ) );
	$hp->appendChild( $ha );
	$page->appendChild( $hp );
}

# PROCESS XLS FILE
elsif ( defined $xlsfile )
{
	my $hbin_ok = ( $hy_enabled ) ? 1 : 0; # flag to indicate if hybrid ingest is acceptable
	
	show_error($repo, $page, "Invalid passphrase") if $passphrase ne $ppans; 
	show_error($repo, $page, "You have not selected an .xls file") if $xlsfile !~ /\.xls$/i; 

	show_error($repo, $page, "You have not supplied the full path to the file .xls file")
		 if ! defined $xlspath || $xlspath =~ /^$pathmsg/ ; 

	# convert path to slashes
	$xlspath =~ s#\\#/#g;

	# add trailing slash if not present
	$xlspath .= '/' if $xlspath !~ m#/$# ;

	show_error($repo, $page, "The supplied path is not allowed. The file must reside in the Repository folder with the RDL share on the N: drive") if $xlspath !~ /^$prepath/ ; 

	# create a linux version of the path
	my $xlslpath = $xlspath;
	$xlslpath  =~ s#^$prepath#$linuxpath#;

	# check if file exists on linux side
	show_error($repo, $page, "The file '$xlspath$xlsfile' cannot be found.") if ! -f $xlslpath.$xlsfile;
	
	# construct the output filename
	my $xmlfile = $xlsfile;
	$xmlfile =~ s#\.xls$#\.xml#i;

	# initiate output string
	my $op = '';
	
	# initiate an error string in case it's needed
	my $error_str = '';

	# check for spaces in the file path or file name
	$error_str = 'spaces in the file name' if $xlsfile =~ / /;
	$error_str = 'spaces in the file path' if $xlslpath =~ / /;
	
	# try the conversion to XML file if there are no file path or file name errors
	if ( ! $error_str ) {
		$op = "Converting '$xlspath$xlsfile'\n\n";
		my $cmd = eval('"'."$cmd_conv".'"') . " $xlslpath$xlsfile $xlslpath$xmlfile 2>&1";
		$op .= `$cmd`;
		$op .= "XML file creation completed.\n\n";

		# flag an error if required
		$error_str = 'spreadsheet errors' if $op =~ /ERROR\:/;
	}
	
	# try file reference checking only if there are no errors so far
	if ( ! $error_str ) {
		$op .= "Checking file references in '$xmlfile'...\n\n";

		# some file checking parameters
		my $fchk_total = 0;
		my $fchk_found = 0;
		my $fchk_missing = 0;
		my $fchk_files = '';
		my $schk_oversized = 0;
		my $schk_files = '';
		my $schk_hbin_oversized = 0;
		my $schk_hbin_files = '';
		my $isize = 0;

        	if ( -f "$xlslpath$xmlfile" ) {
        	        open FILE, "$xlslpath$xmlfile" or die "\nERROR: Cannot open file $xlslpath$xmlfile\n\n";
        	        while (<FILE>) {
        	                chomp;
        	                if ($_ =~ /<url>file:\/\/(.*?)<\/url>/) {
        	                        $fchk_total++;
									my $raw_path = uri_unescape($1);
        	                        if (-f $raw_path) {
        	                                $fchk_found++;
											my $fsize = -s $raw_path;
											$isize += $fsize;
											# check back-end file size limit
											if ( $max_befsize && ( $fsize > $max_befsize ))
											{
												$schk_files .= basename($raw_path)
													. '   [' . hr_bytes( $fsize, 1 ) . "]\n";
												$schk_oversized++;
											}
											# check hybrid file size limit
											if ( $max_fsize && ( $fsize > $max_fsize ))
											{
												$schk_hbin_files .= basename($raw_path)
													. '   [' . hr_bytes( $fsize, 1 ) . "]\n";
												$schk_hbin_oversized++;
											}
        	                        }
        	                        else {
        	                                $fchk_files .= basename($raw_path) . "\n";
        	                                $fchk_missing++;
        	                        }
        	                }
        	        }
        	}

		$op .= "Found $fchk_found out of $fchk_total files referenced in the XML file\n\n";
		
		# ERROR TRAPS
		# missing files
		if ( $fchk_missing )
		{
			$op .= "ERROR: The following files were not found: -\n$fchk_files\n\n";
			$error_str = 'bad file references';
		}
		# back-end ingestion size limits (if enabled)
		elsif ( $be_enabled && $schk_oversized )
		{
			$op .= "ERROR: The following files are too large for back-end ingestion "
				. "[max " . hr_bytes( $max_befsize, 1 ) . "] : -\n$schk_files\n\n";
			$error_str = 'file sizes too large';
		}
		elsif ( $be_enabled && $max_beisize && ( $isize > $max_beisize ))
		{
				$op .= "ERROR: The total size of this ingestion ["
					. hr_bytes( $isize, 1 ) . "] is too large.\n"
					. "Maximum permitted back-end ingestion size is "
					. hr_bytes( $max_beisize, 1 ) . "\n\n";
				$error_str = 'ingestion size too large';
		}
		# hybrid ingestion size limits (if enabled )
		# NOTE: if we get here we know the back-end limits are okay
		elsif ( $hy_enabled )
		{
			if ( $schk_hbin_oversized )
			{
				# we can't use hybrid in this case
				$hbin_ok = 0;
				
				if ( $be_enabled )
				{
					$op .= "INFO: Back-end ingestion is necessary because ";
					$op .= "the following files\nare too large for hybrid ingestion "
						. "[max " . hr_bytes( $max_fsize, 1 ) . "] : -\n$schk_hbin_files\n\n";
				}
				else
				{
					$op .= "ERROR: The following files are too large for hybrid ingestion "
						. "[max " . hr_bytes( $max_fsize, 1 ) . "] : -\n$schk_hbin_files\n\n";
					$error_str = 'file sizes too large';
				}
			}
			elsif ( $max_isize && ( $isize > $max_isize ))
			{
				# we can't use hybrid in this case
				$hbin_ok = 0;
				
				if ( $be_enabled )
				{			
					$op .= "INFO: Back-end ingestion is necessary because ";
					$op .= "the total size of this ingestion is\n"
						. hr_bytes( $isize, 1 ) . "].\n"
						. "Maximum permitted hybrid ingestion size is "
						. hr_bytes( $max_isize, 1 ) . "\n\n";
				}
				else
				{
					$op .= "ERROR: The total size of this ingestion ["
						. hr_bytes( $isize, 1 ) . "] is too large.\n"
						. "Maximum permitted hybrid ingestion size is "
						. hr_bytes( $max_isize, 1 ) . "\n\n";
					$error_str = 'ingestion size too large';				
				}
			}	
		}
	}

	# display the system output regardless of any errors
	my $pre = $repo->make_element( "pre", style => 'white-space: pre-wrap; overflow: auto;' );
	$pre->appendChild( $repo->make_text( $op ) );
	$page->appendChild( $pre );
	
	# if there are errors don't allow continuation
	if ( $error_str ) {
	        my $ep = $repo->make_element( "p" );
			if ($error_str =~ /file path/ ) {
				$ep->appendChild( $repo->make_text( "There are $error_str - please rename folder(s) in the spreadsheet file path replacing any spaces with underscores, then " ) );			
			}
			elsif ( $error_str =~ /file name/ ) {
				$ep->appendChild( $repo->make_text( "There are $error_str - please rename the spreadsheet file replacing any spaces with underscores, then " ) );			
			}
			elsif ( $error_str =~ /file sizes/ ) {
				$ep->appendChild( $repo->make_text( "There are $error_str - please use another ingestion method OR try splitting some of the files into smaller ones, make a copy of the spreadsheet in its current state if necessary, amend it to reflect the new list of files, be sure to save the changes to it, then  " ) );			
			}
			elsif ( $error_str =~ /ingestion size/ ) {
				$ep->appendChild( $repo->make_text( "Total $error_str - please use another ingestion method OR try reducing the number of files, make a copy of the spreadsheet in its current state if necessary, amend it to reflect the new list of files, be sure to save the changes to it, then  " ) );			
			}
			else {
				$ep->appendChild( $repo->make_text( "There are $error_str - please make a copy of the spreadsheet in its current state if necessary, then edit the spreadsheet to correct the errors, be sure to save the changes to it, then " ) );
			}
			
	        my $ea = $DEBUG ?
				$repo->render_link( $host_cfg{$hostname}{https_link} ) :
				$repo->render_link( $host_cfg{$hostname}{https_link} . '?debug=1' );
	        $ea->appendChild( $repo->make_text( 'try again.' ) );
	        $ep->appendChild( $ea );

	        $page->appendChild( $ep );

	}
	# continue as planned if there are no errors
	else
	{
		# Create paragraph
		my $p = $repo->make_element( "p" );
		my $prompt = ( $hbin_ok ) ?
			"If the conversion appears to have worked without errors you can attempt ingestion..." :
			"If the conversion has worked without errors you can set this item for back-end ingestion...";
		$p->appendChild( $repo->make_text( "$prompt" ) );
		$page->appendChild( $p );
	
		# create form
		my $f = $repo->render_form( "POST" );
		$f->appendChild( $repo->render_hidden_field( "xmlfilepath", "$xlslpath$xmlfile" ) );
		$f->appendChild( $repo->render_hidden_field( "debug", "$DEBUG" ) );
		$f->appendChild( $repo->render_hidden_field( "hbinmode", "1" ) ) if $hbin_ok;		
		$f->appendChild( $repo->render_option_list(
        	        name => 'repoid',
        	        id => 'repoid',
        	        values => \@repos,
        	        default => $host_cfg{$hostname}{default_repo},
        	        labels => \%labels ) );

		$f->appendChild( $repo->render_input_field( name => "oneliner", size => 40, value => "$ppmsg")  );
		my $subtxt = ( $hbin_ok ) ?
			"Ingest into EPrints" :
			"Set for back-end ingestion";
		$f->appendChild( $repo->render_action_buttons( submit => "$subtxt" ) );
		$page->appendChild( $f );
	}
	
}

# INGEST XML FILE
elsif ( defined $xmlfilepath )
{
	show_error($repo, $page, "Invalid passphrase") if $passphrase ne $ppans; 
	my $xmlpcfilepath = $xmlfilepath;
	
	$xmlpcfilepath =~ s#^$linuxpath#$prepath#;
	$xmlpcfilepath =~ s#/#\\#g;
	
	my $op = '';
	my $cmd = '';
	my $chktxt = '';
	
	# hybrid ingestion
	if ( defined $hbinmode )
	{
		$op = "Attempting ingestion using metadata file\n'$xmlpcfilepath'...\n\n";
		$cmd = eval('"'."$cmd_ingest".'"') . " $xmlfilepath 2>&1";
		#$op = "$cmd";
		$op .= `$cmd`;
		
		# update views if approrpiate config flag is set
		if ( $host_cfg{$hostname}{repo}{$repoid}{do_views} ) {
			$op .= "\n\nUpdating the repository views to show the new additions...\n\n";
			$cmd = eval('"'."$cmd_genview".'"') . " 2>&1";
			$op .= `$cmd`;
		}
		# update abstracts if approrpiate config flag is set
		if ( $host_cfg{$hostname}{repo}{$repoid}{do_abs} ) {	
			$op .= "\n\nRegenerating abstract pages to overwrite any old cached pages for current items...\n\n";
			$cmd = eval('"'."$cmd_genabs".'"') . " 2>&1";
			$op .= `$cmd`;
		}
		$chktxt = "You can check if data ingestion has been successful by going to ";
	}
	# back-end ingestion
	else
	{
		$cmd = eval('"'."$cmd_inprep".'"') . " 2>&1";
		$op = "Invoking back-end ingestion preparation for this item...\n\n";
		$op .= `$cmd`;
		$chktxt .= "After back-end ingestion has run you can check if it was successful by going to ";
	}
	
	my $pre = $repo->make_element( "pre", style => 'white-space: pre-wrap; overflow: auto;' );
	$pre->appendChild( $repo->make_text( $op ) );
	$page->appendChild( $pre );
	
	my $p = $repo->make_element( "p" );
	$p->appendChild( $repo->make_text( "$chktxt" ) );

	my $a = $repo->render_link( $host_cfg{$hostname}{repo}{$repoid}{lat_link} );
	$a->appendChild( $repo->make_text( $host_cfg{$hostname}{repo}{$repoid}{lat_link} ) );
	$p->appendChild( $a );
	
	$page->appendChild( $p );
}

# SHOW FILE SELECTOR
else
{
	# Create paragraphs
	my $p = $repo->make_element( "p" );
	$p->appendChild( $repo->make_text( "Browse to the .xls spreadsheet file you wish to convert to EPrints XML" ) );
	$page->appendChild( $p );

	$p = $repo->make_element( "p" );
	$p->appendChild( $repo->make_text( "Note: the spreadsheet file must reside within the Repostiory folder in the RDL area of the N: drive, and any associated data files must reside in the same folder as the spreadsheet file, or in a sub-folder within it." ) );
	$page->appendChild( $p );

	$p = $repo->make_element( "p" );
	$p->appendChild( $repo->make_text( "Due to web browser security restrictions you also need to supply the full path to the file separately (the quickest way is to copy it from the top of the File Upload window)" ) );
	$page->appendChild( $p );

	$p = $repo->make_element( "p" );
	$p->appendChild( $repo->make_text( "IMPORTANT: this facility OVERWRITES the .xml file without warning (e.g. oops.xls -> oops.xml)" ) );
	$page->appendChild( $p );

	# create form
	my $f = $repo->render_form( "POST" );
	$f->appendChild( $repo->render_hidden_field( "debug", "$DEBUG" ) );
	$f->appendChild( $repo->render_upload_field( "xlsfile" )  );
	$f->appendChild( $repo->render_input_field( name => "xlspath", size => 120, value => "$pathmsg... e.g. N:\\Academic-Services\\Library-Services\\RDL\\Repository\\Some\\path")  );
	$f->appendChild( $repo->render_input_field( name => "oneliner", size => 40, value => "$ppmsg")  );
	$f->appendChild( $repo->render_action_buttons( submit => "Convert to EPrints XML" ) );
	$page->appendChild( $f );
}

# create title
my $title = $repo->make_text( $TITLE );

# Wrap in template
$repo->build_page( $title, $page );
$repo->send_page();

# End repo
$repo->terminate;


sub show_error
{
	# NOTE - need to pass in any globally defined variables here to prevent
	# pesky thread caching issues where for a given apache thread, a sub
	# may end up using a globally defined variable value from a previous
	# instantiation of the script - the only other way to prevent this
	# is to restart the apache service after each run - probably best
	# not doing that!
	my $rr = shift;
	my $pp = shift;
	my $msg = shift;
	my $uri = shift;
	my $link_name = shift;

	$msg =~ s#\n# #g;

	$msg = "ERROR: $msg ";
	my $p = $rr->make_element( "p" );
        $p->appendChild( $rr->make_text( "$msg" ) );

	if ( defined $uri ) {
		my $a = $rr->render_link( $uri );
		$link_name = $uri if ! defined $link_name;
		$a->appendChild( $rr->make_text( $link_name ) );
		$p->appendChild( $a );
	}

	$pp->appendChild( $p );
	my $debug_str = "[ $$ ] " . localtime . " " . $rr->{request}->connection->remote_ip;
	$pp->appendChild( $rr->make_element( "p" )->appendChild( $rr->make_text( "$debug_str" ) ) ) ;

	# print to the error log
	print STDERR "Datatool: $debug_str\nDatatool: $msg\n";
	
	# Build error page
	$rr->build_page(
		$rr->make_text( "ERROR" ),
		$pp,
	);
	$rr->send_page();
	$rr->terminate;
	exit;
}

# pretty print a byte number in units of 1024 - and show raw bytes too if show_bytes flag is set
sub hr_bytes
{
	my $rawb = shift;
	my $show_bytes = shift || 0;
	
	return '' if $rawb !~ /^[0-9]+$/;
	
	my $modb = $rawb;

	foreach ( 'bytes', 'KB', 'MB', 'GB', 'TB', 'PB' )
	{
		if ( $modb < 1024 )
		{
			my $op = sprintf("%.0f ",$modb)."$_";
			$op .= " ($rawb bytes)" if ( $show_bytes && $rawb > 1023 );
			return $op;
		}
		$modb /= 1024;
	}
}


# Create table for metadata
#my $table = $repo->make_element( "table" );
#$page->appendChild( $table );

# Get list of fields for eprint type
#my $type = $eprint->get_value( "type" );
#my @fields = $eprint->get_dataset->get_type_fields( $type );

# Iterate over fields
#foreach my $field ( @fields )

#	# Add table row containing field name / field value
#	my $tr = $repo->make_element( "tr" );
#	$table->appendChild( $tr );
#	my $th = $repo->make_element( "th" );
#	$tr->appendChild( $th );
#	$th->appendChild( $field->render_name( $repo ) );
#	my $td = $repo->make_element( "td" );
#	$tr->appendChild( $td );
#	$td->appendChild( $eprint->render_value( $field->get_name ) );
#}

#my $title = $eprint->render_value( "title" );

