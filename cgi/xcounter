use EPrints;
use strict;
use Data::Dumper;

my $eprints = EPrints->new;
my $repo = $eprints->current_repository;
exit( 0 ) unless( defined $repo );

$repo->send_http_header( content_type=>"text/plain; charset=UTF-8" );

my %counts;
foreach my $ds_id ($repo->get_sql_dataset_ids)
{
	my $ds = $repo->dataset( $ds_id );
	my $table = $ds->get_sql_table_name;
	$counts{$ds_id} = $repo->get_database->count_table( $table );
}
{
	my $ds = $repo->dataset( "eprint" );
	my $search = $ds->prepare_search;
	my @counts = $search->perform_groupby( $ds->field( "eprint_status" ) );
	foreach my $i (0..$#{$counts[0]})
	{
		$counts{$counts[0]->[$i]} = $counts[1]->[$i];
	}
	for(qw( inbox buffer archive deletion ))
	{
		$counts{$_} ||= 0;
	}
}
foreach my $ds_id ( sort keys %counts )
{
	print sprintf("%s: %i\n",
		$ds_id,
		$counts{$ds_id}
	);
}

{
        my $sql = 'select eprint_status as status, count(*) as count';
        $sql .= ' from document join eprint on document.eprintid = eprint.eprintid';
        $sql .= ' where docid not in (select docid from document_relation_type)';
        $sql .= ' group by status;';

        my $sth = $repo->get_database->prepare_select( $sql );
        $repo->get_database->execute( $sth , $sql );
        my %dcounts;
        while( my ( $status, $num ) = $sth->fetchrow_array )
        {
                $dcounts{$status} = $num;
        }
        for(qw( archive buffer inbox deletion ))
        {
                $dcounts{$_} ||= 0;
        }
        foreach my $docs ( sort keys %dcounts )
        {
                print sprintf("original_documents_%s: %i\n", 
                        $docs,
                        $dcounts{$docs}
                );
        }
}

#foreach my $vds ( qw ( eprint archive buffer inbox deletion ) )
#{
#        my $count = 0;
#        my $dds = $repo->dataset( $vds );
#        my $dsearch = $dds->prepare_search;
#        my $list = $dsearch->perform_search;
#        my $info = { count => 0 };
#
#        $list->map( \&doctotal, $info );
#        print sprintf("original_documents_%s: %i\n",
#                $vds,
#                $info->{count}
#        );
#}

# version
print sprintf("version: %s\n", EPrints->human_version);

# Indexer Status
my $daemon = EPrints::Index::Daemon->new(
		session => $repo,
		logfile => EPrints::Index::logfile(),
		noise => ($repo->{noise}||1),
);

my $status = "not-running";
$status = "running" if $daemon->is_running();
$status = "stalled" if $daemon->has_stalled();
print "indexer: $status\n";

print "epm: ";
{
my $first = 1;
$repo->dataset( 'epm' )->dataobj_class->map($repo, sub {
	my( undef, undef, $epm ) = @_;

	print "; " if !$first;
	$first = 0;
	print $epm->value( "epmid" ) . "=" . $epm->value( "version" );
});
}
print "\n";

sub doctotal
{
        my ( $session, $dataset, $eprint, $info ) = @_;
        my @docs = $eprint->get_all_documents;
        $info->{count} += scalar(@docs);
}

exit;
