#!/usr/bin/perl -w
use FindBin;
use lib "$FindBin::Bin/../perl_lib";
use EPrints;
use strict;
use Data::Dumper;

# repository to work with
my $repo_id = 'researchdata';

# log file to write to
my $logfile = "/usr/share/eprints/var/archive_$repo_id.log";

# get and set timestamp
my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = gmtime;
my $timestamp = sprintf("%04d%02d%02d%02d%02d%02d", $year + 1900, $mon + 1, $mday, $hour, $min, $sec);

# try opening the log file
open LOG, '>>', $logfile || die "Cannot open log file '$logfile'\n";

# connect to repository
my $repo = new EPrints::Session( 1 , $repo_id , 1 );
if( !defined $repo )
{
	print STDERR "Failed to load repository: $repo_id\n";
	exit 1;
}

# get archive virtual dataset (i.e. only live eprints)
my $ds = $repo->dataset( 'archive' ) ;
if( !defined $ds )
{
	print STDERR "Unknown Dataset ID: archive\n";
	$repo->terminate;
	exit 1;
}

# can't use this simple method - shame
#my $list = $ds->search(search_fields => [{
#    meta_fields => [qw( archive_status )], value => "NULL",
#  }]);

# horrible hack to get around eprints not being able to search for nulls...
# first get all items NOT required
my $searchexp = $ds->prepare_search();
  $searchexp->add_field(
    fields => [
      $ds->field('archive_status')
    ],
    value => '',
    match => 'SET',
);
my $list_unwanted = $searchexp->perform_search;

# then get a list of ALL items (yuk!)
my $list = $ds->search();

# finally "take one from t'other" to get the ones we WANT
$list = $list->remainder( $list_unwanted );

my $count = $list->count;

# update the log
if ( $count ) {
	print LOG "$timestamp: Found $count eprints requiring archiving\n";
}
else {
	print LOG "$timestamp: No eprints found requiring archiving\n";
}

# ids method returns a list within a list
my @eprint_ids = $list->ids;

# loop through the list of eprints that have an archive_status of null
# remainder method does not return an ordered list so we sort it here
foreach my $epid ( sort {$a <=> $b} @{$eprint_ids[0]} ) {
	my $ep = $ds->dataobj( $epid );
	if ( defined $ep ) {
		print LOG "$epid: " . $ep->get_value('title') . "\n";
		do_arkivum( $repo, $ep );
	}
}

# run the Arkivum checker plugin
###my $plugin = $repo->plugin('Event::Arkivum');
###$plugin->astor_checker();

$repo->terminate;
close LOG;
exit;




# process an eprint object to set it for archiving
sub do_arkivum
{
	my ( $repo, $eprint ) = @_;

	  # request to store the eprint in A-Stor
	  if ( defined $eprint )
	  {
			my $eprintid = $eprint->id;
			my $status = $eprint->get_value( "eprint_status" );
			if ( $status eq 'archive' )
			{
				#print "Setting eprint " . $eprint->id . " for archive\n";
				  $repo->dataset( "astor_eprint" )->create_dataobj(
				  {
						eprintid => $eprintid,
						userid => 1, #$repo->current_user->id,
						justification => 'EPrint A-Stor Archive Request',
						astor_status => 'archive_scheduled',
				  });

				  # Update the eprint archive_status field so we know
				  # that the A-Stor request has been made
				  $eprint->set_value("archive_status", "archive_approved");
				  $eprint->commit();
			}
	  }
}

# set a trigger on an eprint object
sub do_trigger
{
	my ( $repo, $eprint ) = @_;
	$eprint->{session}->run_trigger( EPrints::Const::EP_TRIGGER_STATUS_CHANGE,
			repository => $repo,
	#$eprint->{dataset}->run_trigger( EPrints::Const::EP_TRIGGER_STATUS_CHANGE,
			#repository => $repo,
			dataobj => $eprint,
			old_status => 'archive',
			new_status => 'archive'
        );
}
